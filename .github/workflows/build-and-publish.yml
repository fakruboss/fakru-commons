name: Build and Publish JAR

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Configure Git user
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"

      - name: Calculate new version
        id: version
        run: |
          LAST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.2.0")
          NEW_VERSION=$(echo $LAST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "NEW_VERSION=$NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Check if the tag already exists
          TAG_EXISTS=$(git tag -l "$NEW_VERSION")
          if [ ! -z "$TAG_EXISTS" ]; then
            # Increment again if the version already exists
            NEW_VERSION=$(echo $NEW_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            echo "Incremented to NEW_VERSION=$NEW_VERSION"
          fi
          echo "FINAL_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update POM version
        run: |
          mvn versions:set -DnewVersion=${{ steps.version.outputs.NEW_VERSION }}
          mvn versions:commit

      - name: Build with Maven
        run: mvn clean package

      - name: Publish to GitHub Packages
        run: mvn deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and Push Tag
        run: |
          git tag ${{ steps.version.outputs.NEW_VERSION }}
          git push origin ${{ steps.version.outputs.NEW_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}